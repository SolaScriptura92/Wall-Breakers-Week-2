struct Alpha
{
    char x;
    int y;
    
    Alpha(char a, int b)
    {
        x = a;
        y = b;
    }
};

struct Comp
{
   bool operator()(const Alpha& s1, const Alpha& s2)
   {
       return s1.y > s2.y;
   }
};

class Solution {
public:
    string frequencySort(string s) 
    {
        map<char, int> m; //map each char to number of occurrences
        map<char, int>::iterator it;
        string sortedString = "";
        vector<Alpha> v;
        
        for(int i = 0; i < s.length(); i++)
        {
            it = m.find(s[i]);
            
            if(it == m.end()) //first occurrence
            {
                m.insert( {s[i], 1} );
            }
            
            else
            {   
                it->second++;
            }
        }
        
        for(it = m.begin(); it != m.end(); it++)
        {
            Alpha a(it->first, it->second);
            v.push_back(a);
        }
        
        sort(v.begin(), v.end(), Comp());
        
        for(int t = 0; t < v.size(); t++)
        {
            for(int u = 0; u < v[t].y; u++)
                sortedString += v[t].x;
        }
        
        return sortedString;
    }
};
