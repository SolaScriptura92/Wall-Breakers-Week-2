class Solution {
public:
    int uniqueMorseRepresentations(vector<string>& words) 
    {
       vector<string> morse = { ".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.." };
        
        vector<char> alphabet = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
        
        unordered_map<char, string> myMap;
        unordered_map<char, string>::iterator it;
        unordered_map<string, int> transformations;
        string temp = "";
        int count = 0;
        
        for(int i = 0; i < morse.size(); i++)
        {
            myMap.insert( {alphabet[i],morse[i]} );
        }
        
        for(int j = 0; j < words.size(); j++)
        {
            for(int k = 0; k < words[j].length(); k++)
            {
                it = myMap.find(words[j][k]);
                
                temp += it->second;
            }
            
            if(transformations.find(temp) == transformations.end())
            {
                count++;
                transformations.insert( {temp, 1} );
            }
            
            temp = "";
        }
        
        return count;
    }
};
